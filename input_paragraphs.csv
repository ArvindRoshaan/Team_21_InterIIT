id,paragraph,theme
1,Welcome to DevRev PLuG platform! Our goal is to provide an easy to use experience that empowers your end users and customer facing teams with ready access to relevant information to enable more effective communication. This document provides definitions of some key components of the platform. PLuG: This refers to the part of the platform that directly enables communication with and understanding of your end users. This includes your customer success and support teams. PLuG is not an exact acronym but can be interpreted as Product-Led User Growth.,DevRev
2,"Conversations refer to the communication chains you have with your rev users. They begin in the DevRev PLuG widget, which enables live chat within customers' apps with just a few lines of code. Unlike most platforms, customer conversations are no longer siloed to just front-office support, sales, and customer success staff. Instead, they are accessible to everyone in the dev org through the PLuG inbox. The service-level metric for a conversation is time to response. You can add a title to your conversations as well as members from your own dev org and other members from the user's rev org without starting a new thread or email chain. Because there can be many tickets attached to a single conversation, there is no need to start a new thread for new topics either.",DevRev
3,"A conversation is typically started by rev user. It may be a short interaction, such as a quick question about a sale, that does not require a ticket. If a conversation takes more than 5 mins to close, we recommend that you open one or more tickets. A conversation could also contain one or more items that you would want to capture in a ticket. A ticket is used to capture anything that you may need to follow up on from a conversation, which could be bugs, feature requests, or anything in between. A ticket is associated with a part of the product and can come from either an internal or an external user.",DevRev
4,"Later on, a software engineer may start work on this ticket by creating an issue and breaking that issue into smaller pieces with tasks. An issue describes what the developer will work on and is created or accepted by someone who owns or works on the associated part of the product. This distinction allows developers to break up a ticket from a rev user into issues as they see fit and delegate the work to other team members as necessary. Tickets and issues are linked in many-to-many relationships. It may require multiple issues to resolve a ticket, or one issue may resolve multiple tickets if different rev users experience and describe the same behavior in different ways.",DevRev
5,"DevRev proactively gets ahead of duplicate work during the work creation process using work deflection. As you're creating a new work item, the Similar Work modal appears and presents potential duplicates. You can also use this modal to link the work you're creating to other work, if appropriate. In traditional systems of record, duplicate work is rampant, and maintenance of the backlog can be an entire job itself. Huge engineering backlogs can have detrimental effects on developers, morale, and velocity. One way DevRev gets ahead of that is with work deflection.",DevRev
6,"A part is a related piece of a product or service that has a lifecycle (creation, operation, evolution, deprecation), and can be recursively made of smaller parts. Events and work items must be related to parts. In general, parts are the core objects that almost all other objects will link to, which helps enforce the notion of tying everything back to the product or service. There are two core categories of parts: rev parts and dev parts. Rev parts relate to how a product is expressed, integrated, or consumed. These parts may be consumed by external customers (revs) or internal employees (devs). Although they may also be provided/enabled by dev parts running internally, the customer just sees the product, service or feature they are interacting with. Rev parts may also be abstractions on other rev parts exposed by 3rd parties (such as Auth0 or s3). For example, in the digital world, rather than integrating with code or packages, they may integrate with APIs. Dev parts are those built internally related to code or something the developer relies on or builds, or a service provided by an or. These may be runnables that may expose APIs or linkables that may be used in other services (such as utils or libraries). Though they may provide the functionality exposed and interacted with by the customer, they are often abstracted and unknown to the user.",DevRev
7,"A feature exists under a capability (or feature for sub-features) and is commonly a unit of configuration or ""knobs"" in a capability. Features typically have the following characteristics: Exist under a capability (or feature for sub-features) Provide a unit of configuration (adjective) for entities managed by the capability Enable version history (adjective) on object May provide a subset of the API namespace Are interacted with only inside the context of the capability or not directly interacted with at all The following figure shows some sample DevRev product features.",DevRev
8,"A runnable is a dev part and is something that can be instantiated or do something. Example runnables may be macroservices, microservices, o functions (lambdas). Runnables are things that have some direct execution or lifespan. A runnable may serve one or more features and/or capabilities. Runnables typically have the following characteristics: Are a unit of functionality that can be deployed independently or as part of a larger system Have an execution lifecycle be it short (lambda/function) or long (microservice) Expose an API Are interacted with directly via an API or UI Are published in a service registry or load balancer Example runnables: Docker image Lambda bundle",DevRev
9,"A linkable is a unit of functionality that is designed to be part of a system or application and not used directly. These commonly refer to things like libraries or utils that may be leveraged by multiple runnables. Components typically have the following characteristics: Linkable items are commonly used as libraries or binary artifacts Not commonly exposed to the consumer (but can be) Are intended to be used as part of larger services, not on their own",DevRev
10,"Example linkable parts: library DLL Golang package Example DevRev Linkables: all clients (e.g. partiql-client, codex-client, mfz-client) shared (logging, etc.)",DevRev
11,Trails is an extensible interface that allows you to view and manage your part hierarchy and related items. Think of it like a graph canvas that is rendering linkages between items making them easier to navigate and summarize. The following image shows an example of DevRev's trails view.,DevRev
12,"The customer will need to opt into Parts Discovery since it is still a beta offering. The customer can use any or all of the following options to seed DevRev parts discovery with data. Custom File Upload You can provide information about the API paths, services, and routing rules using a custom_routing.json file that implements a simple schema. Following is an example of the custom file and the corresponding trail showing the parts discovered through it:",DevRev
13,Features are discovered by analyzing OpenAPI specification files found in the git repository integrated with the DevRev App. Kubernetes-based Discovery The Trail can be discovered by installing the DevRev Kubernetes Collector on your cluster. Parts Discovery algorithm relies on the Feature APIs exposed via the Kubernetes Ingress context. The helm charts to install the collector along with the instructions to install are available via our git repository here. Our collector is a lightweight cronjob which runs once in 6 hours and consumes minimum resources. We cap our utilization and expose the limits in a public helm value file.,DevRev
14,"Your customers (revs) and their identity are a crucial part of the DevRev offering and ecosystem. Conversations on DevRev rely on rev identity to capture information about the customer initiating the conversation. Similarly, tickets on DevRev can capture who the ticket was reported by (or reported for).",DevRev
15,"Integrations DevRev's integrations like Slack for Support, Support with Email are additional channels available with DevRev's Omnichannel Support offering. APIs or UI Apart from automatic ingestion, new customer records can also be created manually using APIs or UI. With DevRev's APIs, you can create automations to ensure your customer records in DevRev stay in sync with your primary customer data.",DevRev
16,"While ingesting customer identity into DevRev, it's important that customer information coming across channels is matched to the same record. For example, a customer record created by you using APIs should get resolved and matched when the same customer engages with you on the PLuG widget for a support interaction. This is achieved by using the external reference provided by you when creating customer identity.",DevRev
17,Adding new Customers# Customer records offer a place to do the following: Find all conversations and tickets linked to a customer in one view. Have internal discussions related to a customer. Add description or notes about a customer. Assign and owner or tags to the record for your front-office processes.,DevRev
18,"Apart from customer records that get automatically created from your PLuG integration, new customer records can be created through the UI. New customers can be added to the DevRev system directly from the Customers page. While creating new customer records, be sure to specify the External Ref so customer information coming from other channels (like PLuG) can be matched to the right customer record.",DevRev
19,"Authentication to DevRev APIs requires a personal access token (PAT). A PAT is used to uniquely identify a dev user in context of a dev org and can be used by external third-party applications to access DevRev APIs on behalf of the corresponding dev user. A PAT has the same set of privileges that the owner of the PAT has on the DevRev platform. The validity duration of a PAT is set when it is created. You cannot renew a PAT; you can only create a new PAT and update your code to use it. For example, a VS Code plugin that pulls issues from the DevRev platform pertaining to a particular dev user will need to rely on that user’s PAT to authenticate the DevRev APIs. If you are receiving an invalid token error, you can check whether the token is valid at jwt.io.",DevRev
20,"Generate a Personal Access Token (PAT)# In the DevRev app, go to the relevant dev org. Go to DevOrg Settings > Account > Personal Access Token. Click New token and follow the workflow to create your PAT. As the token value is not retrievable later, we recommend using descriptive names for PATs as it can help you differentiate between multiple PATs.",DevRev
21,"Revoke a Personal Access Token# Caution: Once a PAT is revoked, it cannot be restored. In the DevRev app, go to the relevant dev org. Go to DevOrg Settings > Account > Personal Access Token. Click Revoke next to the PAT you wish to revoke. You can also click the Revoke all button to revoke all the tokens which you have previously generated.",DevRev
